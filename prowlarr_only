#!/usr/bin/env python3
import os
import asyncio
import logging
import requests
from requests.exceptions import RequestException
import json

# Set up logging
logging.basicConfig(
    format='%(asctime)s [%(levelname)s]: %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)

# Prowlarr API endpoint
PROWLARR_API_URL = (os.environ['PROWLARR_URL']) + "/api/v1"
PROWLARR_API_KEY = os.environ['PROWLARR_API_KEY']

# API timeout for API requests in seconds
API_TIMEOUT = int(os.environ['API_TIMEOUT'])  # 10 minutes

# Function to make API requests with error handling
async def make_api_request(url, api_key, params=None):
    try:
        headers = {'X-Api-Key': api_key}
        response = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.get(url, params=params, headers=headers))
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        logging.error(f'Error making API request to {url}: {e}')
        return None
    except ValueError as e:
        logging.error(f'Error parsing JSON response from {url}: {e}')
        return None

# Function to make API delete with error handling
async def make_api_delete(url, api_key, params=None):
    try:
        headers = {'X-Api-Key': api_key}
        response = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.delete(url, params=params, headers=headers))
        response.raise_for_status()
        return response.json()
    except RequestException as e:
        logging.error(f'Error making API request to {url}: {e}')
        return None
    except ValueError as e:
        logging.error(f'Error parsing JSON response from {url}: {e}')
        return None

# Function to remove stalled Prowlarr downloads
async def remove_stalled_prowlarr_downloads():
    logging.info('Checking Prowlarr queue...')
    prowlarr_url = f'{PROWLARR_API_URL}/queue'
    prowlarr_queue = await make_api_request(prowlarr_url, PROWLARR_API_KEY, {'page': '1', 'pageSize': await count_records(PROWLARR_API_URL, PROWLARR_API_KEY)})
    if prowlarr_queue is not None and 'records' in prowlarr_queue:
        logging.info('Processing Prowlarr queue...')
        for item in prowlarr_queue['records']:
            if 'title' in item and 'status' in item and 'trackedDownloadStatus' in item:
                logging.info(f'Checking the status of {item["title"]}')
                if item['status'] == 'warning' and item['errorMessage'] == 'The download is stalled with no connections':
                    logging.info(f'Removing stalled Prowlarr download: {item["title"]}')
                    await make_api_delete(f'{PROWLARR_API_URL}/queue/{item["id"]}', PROWLARR_API_KEY, {'removeFromClient': 'true', 'blocklist': 'true'})
                else:
                    logging.warning('Skipping item in Prowlarr queue due to missing or invalid keys')
    else:
        logging.warning('Prowlarr queue is None or missing "records" key')

# Make a request to view and count items in queue and return the number.
async def count_records(API_URL, API_Key):
    the_url = f'{API_URL}/queue'
    the_queue = await make_api_request(the_url, API_Key)
    if the_queue is not None and 'records' in the_queue:
        return the_queue['totalRecords']

# Main function
async def main():
    while True:
        logging.info('Running media-tools script')
        await remove_stalled_prowlarr_downloads()
        logging.info('Finished running media-tools script. Sleeping for 10 minutes.')
        await asyncio.sleep(API_TIMEOUT)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
